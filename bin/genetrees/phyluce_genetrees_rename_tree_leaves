#!/usr/bin/env python
# encoding: utf-8
"""
File: rename_genetree_leaves.py
Author: Brant Faircloth

Created by Brant Faircloth on 21 April 2012 15:04 PDT (-0700)
Copyright (c) 2012 Brant C. Faircloth. All rights reserved.

Description: Given an input genetree file, rename the leaves according
to values in a configuration file

"""

import argparse
import configparser

from phyluce.helpers import is_file, FullPaths

import dendropy

#import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Rename the leaves of an input tree"""
    )
    parser.add_argument(
        "--input",
        required=True,
        type=is_file,
        action=FullPaths,
        help="""The input tree file""",
    )
    parser.add_argument(
        "--config",
        required=True,
        type=is_file,
        action=FullPaths,
        help="""A python config file mapping one name to another""",
    )
    parser.add_argument(
        "--output",
        required=True,
        type=is_file,
        action=FullPaths,
        help="""The output tree file""",
    )
    parser.add_argument(
        "--section",
        required=True,
        type=str,
        help="""The section of the conf file to use""",
    )
    parser.add_argument(
        "--order",
        type=str,
        default="left:right",
        choices=["left:right", "right:left"],
        help="""Map the names as entered or in reverse""",
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=["nexus", "newick", "fasta", "phylip"],
        default="newick",
        help="""The tree file format""",
    )
    parser.add_argument(
        "--output-format",
        dest="output_format",
        choices=["nexus", "newick", "fasta", "phylip"],
        default="newick",
        help="""The tree file format""",
    )
    parser.add_argument(
        "--reroot",
        type=str,
        default=False,
        help="""The resulting name to root the tree on""",
    )
    parser.add_argument(
        "--do-not-preserve-spaces",
        type=str,
        default=False,
        help="""Do not retain spaces in output names""",
    )
    return parser.parse_args()


def main():
    args = get_args()
    conf = configparser.ConfigParser()
    conf.optionxform = str
    conf.read(args.config)
    names = conf.items(args.section)
    if args.order == "left:right":
        names = dict([(name[0].replace("-", "_"), name[1]) for name in names])
    elif args.order == "right:left":
        names = dict([(name[1].replace("-", "_"), name[0]) for name in names])
    trees = dendropy.TreeList.get(
        file=open(args.input), schema=args.input_format
    )
    new_labels = []
    for tree in trees:
        for leaf in tree.leaf_nodes():
            if leaf.taxon.label in new_labels:
                pass
            else:
                try:
                    new_label = names[leaf.taxon.label]
                except:
                    new_label = names[leaf.taxon.label.replace(" ", "_")]
                new_labels.append(new_label)
                leaf.taxon.label = new_label
        # reroot
        if args.reroot:
            reroot_node = tree.find_node_with_taxon_label(args.reroot)
            parent_node = reroot_node._get_parent_node()
            tree.reroot_at_node(parent_node)
    if args.do_not_preserve_spaces:
        trees.write_to_path(args.output, args.output_format)
    else:
        trees.write_to_path(
            args.output, args.output_format, preserve_spaces=True
        )


if __name__ == "__main__":
    main()
